{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Seedvaultwithreact/seed-vault/src/components/Reports.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport './reports.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reports = () => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Mocking a fetch function from the database\n    const fetchData = async () => {\n      // Your actual database fetching logic goes here\n      // Example using fetch API:\n      // const response = await fetch('your-api-endpoint');\n      // const data = await response.json();\n      // return data;\n\n      // Mocked data for demonstration\n\n      // Replace with your actual database fetching logic\n      return [];\n    };\n    fetchData().then(fetchedData => {\n      setData(fetchedData);\n    });\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const ctx = chartRef.current.getContext('2d');\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [{\n          label: 'My First dataset',\n          backgroundColor: 'rgba(75,192,192,0.2)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderWidth: 1,\n          hoverBackgroundColor: 'rgba(75,192,192,0.4)',\n          hoverBorderColor: 'rgba(75,192,192,1)',\n          data: data.length ? data : [null, null, null, null, null, null, null]\n        }]\n      },\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef,\n      id: \"lineChart\",\n      width: \"400\",\n      height: \"300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), data.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No seeds added\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Reports, \"NCeDIsK6MCosoHyglBx5V8ky5pI=\");\n_c = Reports;\nexport default Reports;\nvar _c;\n$RefreshReg$(_c, \"Reports\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","Reports","_s","chartRef","chartInstance","data","setData","fetchData","then","fetchedData","current","destroy","ctx","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","length","options","maintainAspectRatio","scales","y","beginAtZero","children","ref","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/daniel/Seedvaultwithreact/seed-vault/src/components/Reports.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport './reports.css';\n\n\nconst Reports = () => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Mocking a fetch function from the database\n    const fetchData = async () => {\n        // Your actual database fetching logic goes here\n        // Example using fetch API:\n        // const response = await fetch('your-api-endpoint');\n        // const data = await response.json();\n        // return data;\n      \n        // Mocked data for demonstration\n      \n      // Replace with your actual database fetching logic\n      return [];\n    };\n\n    fetchData().then(fetchedData => {\n      setData(fetchedData);\n    });\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    const ctx = chartRef.current.getContext('2d');\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [\n          {\n            label: 'My First dataset',\n            backgroundColor: 'rgba(75,192,192,0.2)',\n            borderColor: 'rgba(75,192,192,1)',\n            borderWidth: 1,\n            hoverBackgroundColor: 'rgba(75,192,192,0.4)',\n            hoverBorderColor: 'rgba(75,192,192,1)',\n            data: data.length ? data : [null, null, null, null, null, null, null],\n          },\n        ],\n      },\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    });\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]);\n\n  return (\n    <div>\n      <canvas ref={chartRef} id=\"lineChart\" width=\"400\" height=\"300\"></canvas>\n      {data.length === 0 && <p>No seeds added</p>}\n    </div>\n  );\n};\n\nexport default Reports;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMQ,aAAa,GAAGR,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpCF,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B;MACA;MACA;MACA;MACA;;MAEA;;MAEF;MACA,OAAO,EAAE;IACX,CAAC;IAEDA,SAAS,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW,IAAI;MAC9BH,OAAO,CAACG,WAAW,CAAC;IACtB,CAAC,CAAC;IAEF,IAAIL,aAAa,CAACM,OAAO,EAAE;MACzBN,aAAa,CAACM,OAAO,CAACC,OAAO,CAAC,CAAC;IACjC;IAEA,MAAMC,GAAG,GAAGT,QAAQ,CAACO,OAAO,CAACG,UAAU,CAAC,IAAI,CAAC;IAC7CT,aAAa,CAACM,OAAO,GAAG,IAAIZ,KAAK,CAACc,GAAG,EAAE;MACrCE,IAAI,EAAE,MAAM;MACZT,IAAI,EAAE;QACJU,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;QACxEC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,kBAAkB;UACzBC,eAAe,EAAE,sBAAsB;UACvCC,WAAW,EAAE,oBAAoB;UACjCC,WAAW,EAAE,CAAC;UACdC,oBAAoB,EAAE,sBAAsB;UAC5CC,gBAAgB,EAAE,oBAAoB;UACtCjB,IAAI,EAAEA,IAAI,CAACkB,MAAM,GAAGlB,IAAI,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QACtE,CAAC;MAEL,CAAC;MACDmB,OAAO,EAAE;QACPC,mBAAmB,EAAE,KAAK;QAC1BC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACX,IAAIxB,aAAa,CAACM,OAAO,EAAE;QACzBN,aAAa,CAACM,OAAO,CAACC,OAAO,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;EAEV,oBACEL,OAAA;IAAA6B,QAAA,gBACE7B,OAAA;MAAQ8B,GAAG,EAAE3B,QAAS;MAAC4B,EAAE,EAAC,WAAW;MAACC,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EACvEhC,IAAI,CAACkB,MAAM,KAAK,CAAC,iBAAIvB,OAAA;MAAA6B,QAAA,EAAG;IAAc;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAACnC,EAAA,CApEID,OAAO;AAAAqC,EAAA,GAAPrC,OAAO;AAsEb,eAAeA,OAAO;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}